x <- c(74, 122, 235, 111, 292)
x
mean(x)
x + x
x - mean(x)
y <- c(TRUE, FALSE, TRUE, FALSE)
summary(x)
summary(y)
ls()
str(x)
rm(x)
rm(list=ls())
library("UsingR")
head(rivers)
library("HistData")
head(Cavendish)
str(Cavendish)
Cavendish$density2
head(Cavendish$density2)
summary(Cavendish$density2)
rivers
str(rivers)
exec.pay
summary(exec.pay)
'%in%'
%in%
`%in%`
evens <- seq(0, 20, by=2)
evens
2 %in% evens
`%|%` <- function(x, FUN) FUN(x)
3 %|% sin %|% cos
# value replacement function
're_code<-' <- function(x, old, value) {
x[x == old] <- value
x
}
hip_cost <- c(10500, 45000, 74100, -1, 83500, 86000, 38200, -1,
44300, 12500, 55700, 43900, 71900, -1, 62000)
`re_code<-`(hip_cost, -1) <- NA
# value replacement function
"re_code<-" <- function(x, old, value) {
x[x == old] <- value
x
}
hip_cost <- c(10500, 45000, 74100, -1, 83500, 86000, 38200, -1,
44300, 12500, 55700, 43900, 71900, -1, 62000)
`re_code<-`(hip_cost, -1) <- NA
re_code(hip_cost, -1) <- NA
hip_cost
args(sapply)
# applying function to each variable
sapply(mtcars, mean)
mtcars[,1:2]
sapply(mtcars[,1:2], mean)
sapply(mtcars[,1:2], mean)
args(sapply)
sapply(mtcars[,1:2], mean, simplify = FALSE)
Orange
summary(Orange)
sapply(Orange$age, mean)
sapply(Orange, mean)
mean(Orange$age)
max(Orange$circumference)
summary(exec.pay)
summary(exec.pay, trim=0.10)
summary(exec.pay, trim=0.5)
meany(exec.pay, trim=0.5)
mean(exec.pay)
mean(exec.pay, trim=0.50)
mean(exec.pay, trim=0.10)
exec.pay
mean(exec.pay, trim=0.25)
mean(exec.pay, trim=0.75)
summary(exec.pay)
library(UsingR)
#
head(precip)
# sort
head(sort(precip, decreasing = TRUE))
# variables names
names(precip)
# variables names
head(names(precip))
# named components
test_scores <- c(Alice = 87, Bob = 72, Shirley = 99)
test_scores
args(names)
?names
names(test_scores) <- c("Alice", "Bob", "Shirley")
# assignment functions
test_scores <- c(87, 782, 99) # assign to variable
names(test_scores) <- c("Alice", "Bob", "Shirley")
test_scores
scan()
1:5
1:5
seq(0, 100, by=10)
seq(0, 100, length.out=11)
seq(0, 100, length.out=5)
# indexing
precip[c("Seattle Tacoma", "New York")]
# return indices using match
match(c("Seattle Tacoma", "New York"), names(precip))
precip[65 42]
precip[c(65, 42)]
# combining strings
sprintf("X%s", 1:10)
# paste function
paste("X", 1:10, sep="")
# factors
x <- paste("X", rep(1:3, 4), sep="")
y <- factor(x)
y
y
# adding a factor
levels(y)
# adding a factor
levels(y) <- c(levels(y), "X4")
y[1] <- "X4"
y
# change the labels names
levels(y) <- paste("label", 1:4, sep="")
levels(y)
library(UsingR)
#
head(precip)
# sort
head(sort(precip, decreasing = TRUE))
# variables names
head(names(precip))
# named components
test_scores <- c(Alice = 87, Bob = 72, Shirley = 99)
test_scores
# assignment functions
test_scores <- c(87, 782, 99) # assign to variable
names(test_scores) <- c("Alice", "Bob", "Shirley") # set version of names()
test_scores
seq(0, 100, by=10)
seq(0, 100, length.out=5)
# indexing
precip[c("Seattle Tacoma", "New York")]
# return indices using match
match(c("Seattle Tacoma", "New York"), names(precip))
# combining strings
sprintf("X%s", 1:10)
# paste function
paste("X", 1:10, sep="")
# factors
x <- paste("X", rep(1:3, 4), sep="")
y <- factor(x)
y
# adding a factor
levels(y) <- c(levels(y), "X4")
y[1] <- "X4"
y
# change the labels names
levels(y) <- paste("label", 1:4, sep="")
levels(y)
library(UsingR)
#
head(precip)
# sort
head(sort(precip, decreasing = TRUE))
# variables names
head(names(precip))
# named components
test_scores <- c(Alice = 87, Bob = 72, Shirley = 99)
test_scores
# assignment functions
test_scores <- c(87, 782, 99) # assign to variable
names(test_scores) <- c("Alice", "Bob", "Shirley") # set version of names()
test_scores
seq(0, 100, by=10)
seq(0, 100, length.out=5)
# indexing
precip[c("Seattle Tacoma", "New York")]
# return indices using match
match(c("Seattle Tacoma", "New York"), names(precip))
# combining strings
sprintf("X%s", 1:10)
# paste function
paste("X", 1:10, sep="")
# factors
x <- paste("X", rep(1:3, 4), sep="")
y <- factor(x)
y
# adding a factor
levels(y) <- c(levels(y), "X4")
y[1] <- "X4"
y
# change the labels names
levels(y) <- paste("label", 1:4, sep="")
levels(y)
# factors
x <- paste("X", rep(1:3, 4), sep="")
y <- factor(x)
y
# adding a factor
levels(y) <- c(levels(y), "X4")
y[1] <- "X4"
y
# change the labels names
levels(y) <- paste("label", 1:4, sep="")
levels(y)
y
state.name
state.name[1:5]
y <- factor(state.name[1:5])
y
levels(y) <- c("South", "West", "West", "South", "West")
y
# 50 levels
y <- factor(state.name)[1:5]
y
# levels are actual values
factor(y, levels = y)
# Generating new factors
r <- "red"; b <- "blue"; c <- "green"
factor(rep(c(r, g, b), c(5, 5, 5)))
# Generating new factors
r <- "red"; b <- "blue"; g <- "green"
factor(rep(c(r, g, b), c(5, 5, 5)))
# using gl function
gl(3, 5, labels=c("red", "green", "blue"))
Cars93
View(Cars93)
#
m <- head(Cars93)
m
out <- m$Origin : m$AirBags
out
summary(m$AirBags)
out
str(out)
levels(out)
summary(Cars93)
Cars93
str(Cars93)
# Date and time types
library(lubridate)
current_time <- now()
class(current_time)
# convert date to numeric
as.numeric(current_time)
# get month
month(current_time, label = TRUE)
# get month
month(current_time, label = FALSE)
# get month
month(current_time, label = TRUE)
# get month
str(month(current_time, label = TRUE))
# get month
month(current_time, label = TRUE)
# parse date
x <- "15-Feb-2013 07:57:34"
y <- parse_date_time(x, "dbYHMS")
x
y
year(y)
# arithmetic with dates
now - days(1)
# arithmetic with dates
now() - days(1)
now() - hours(24)
# logical data
whale <-  c(74, 122, 235, 111, 292, 111, 211, 133, 156, 79)
whale > 100
# any function
any(whale > 50)
# all function
all(whale > 50)
# which function returns the indices of the TRUE values
which(whale < 100 | whale > 200)
292 %in% whale
any(292 == whale)
# using match function
match(c(292, 293), whale)
## Coercion
# in sum, logic values are 1 TRUE and 0 FALSE
sum(whale > 200)
View(`re_code<-`)
# indexing
whale[whale > mean(while)]
# indexing
whale[whale > mean(whale)]
# values 1 standard deviation from the mean in either direction
whale[whale < mean(whale) - sd(whale) | whale > mean(whale) + sd(whale)]
# use index to remove na values
hip_cost[ !is.na(hip_cost)]
which(is.na(hip_cost))
which(!is.na(hip_cost))
str(which(!is.na(hip_cost)))
hip_cost[which(!is.na(hip_cost))]
which(!is.na(hip_cost))
x <- babies$dwt
x[ x == 999] <- NA
x
?range
range(x, na.rm = TRUE)
# Example 2.2 Using one variable to filter another
age <- kid.weights$age
ht <- kid.weights$height
ht[ age >= 48 & age < 60]
