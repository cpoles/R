numbers <- c(2, 3, 5, 7, 11, 13, 17, 19)
length(numbers)
# 2.2 Al recorded his car’s mileage at gust last eight fill-ups:
#  65311 65624 65908 66219 66499 66821 67145 67447
# Enter these numbers into the variable gas. Use the function diff on the
# data. What does it give? Interpret what both of these commands return:
#  mean(gas) and mean(diff(gas)).
gas <- c(65311, 65624, 65908, 66219, 66499, 66821, 67145, 67447)
diff(gas)
mean(gas) # mean of gas
mean(diff(gas)) # mean of the difference of gas
x <- c(2, 5, 4, 10, 8)
# 2. Find the square of each number.
sqrt(x)
# 3. Subtract 6 from each number.
x - 6
# 4. Subtract 9 from each number and then square the answers.
# Use the vectorization of functions to do so.
(x - 9) ^ 2
# 2.4 Create the following sequences:
# 1. "a", "a", "a", "a", "a"
rep("a", 5)
# 2. 1, 3, . . . , 99 (the odd numbers in [1,100])
seq(1, 100, by=2)
# 3. 1, 1, 1, 2, 2, 2, 3, 3, 3
rep(c(1,2,3), times=c(3, 3, 3))
# 4. 1, 1, 1, 2, 2, 3
rep(c(1,2,3), times=c(3, 2, 1))
#or
rep(1:3, times=3:1)
rep(1:5, 4:1, times=c(1,1))
rep(c(1:5,4:1), times=c(1,1))
rep(c(1:5,4:1), times=c(1,1))
# 5. 1, 2, 3, 4, 5, 4, 3, 2, 1
# using :, seq, or rep as appropriate.
n <- 1:5
n[] <- 1:5
n
rep(c(1:5,4:1), times=c(1,1))
n
n[] <- 4:1
n
rivers
avg_dist <- abs(rivers - mean(rivers))
avg_dist
head(avg_dist)
rivers[0]
rivers[1,1]
rivers[1]
abs(rivers[1] - mean(rivers)) == avg_dist[1]
-1:3
1:2*3
precip
precip(startsWith("J"))
precip[startsWith("J")]
precip[startsWith(c("J")]
precip[startsWith(c("J"))]
?startsWith()
startsWith(names(precip), "J")
precip[startsWith(names(precip), "J")]
paste("Trial", 1:10, sep="")
f <- system.file("DESCRIPTION", package="UsingR")
dname <- dirname(f)
fname <- basename(f)
dname
fname
paste(dname, fname, sep = .Platform$file.sep)
paste(dname, fname, sep = .Platform$file.sep)
############
library(UsingR)
str(Cars93$Manufacturer)
levels(Cars93$Manufacturer)
str(Cars93$Cylinders)
which(Cars93$Cylinders == '5')
Cars93[which(Cars93$Cylinders == '5')]
Cars93[Cars93$Cylinders == '5']
Cars93$Cylinders == '5'
View(Cars93)
Cars93[89]
Cars93[c(89)]
str(Cars93)
Cars93$Cylinders[Cars93$Cylinders == '5']
Cars93[1:, Cars93$Cylinders == "5"]
Cars93[Cars93$Cylinders == "5"]
which(Cars93, Cars93$Cylinders == "5")
which(Cars93$Cylinders == "5", arr.ind = TRUE)
which(Cars93$Cylinders == "5", arr.ind = FALSE)
which(Cars93$Cylinders == "5")
Cars[1:1]
Cars93[1:1]
Cars93[2, 1:1]
Cars93[3, 1:1]
indices <- which(Cars93$Cylinders == "5")
Cars93[indices,1:]
Cars93[c(indices),1:]
Cars93[c(indices)]
Cars93[Cars93$Cylinders == "5", ]
Cars93[Cars93$Cylinders == "5", ][c("Manufacturer")]
Cars93[Cars93$Cylinders == "5", c("Manufacturer")]
Cars93[Cars93$Cylinders == "5", ][c("Manufacturer")]
View(mtcars)
str(am)
str(mtcars$am)
mtcars$am[mtcars$am == 0] <- "automatic"
View(mtcars)
mtcars$am[mtcars$am == 1] <- "manual"
View(mtcars)
str(mtcars$am)
mtcars$am <- factor(mtcars$am)
View(mtcars)
str(mtcars)
summary(mtcars$am)
str(mtcars$am)
Arbuthnot
str(Arbuthnot)
Arbuthnot[Arbuthnot$Males < Arbuthnot$Females]
Arbuthnot[c('Male', 'Female')[Arbuthnot$Males < Arbuthnot$Females]
e
Arbuthnot[c('Male', 'Female')][Arbuthnot$Males < Arbuthnot$Females]
Arbuthnot["Male":"Female"]
Arbuthnot[c("Male":"Female")]
which(Arbuthnot$Males < Arbuthnot$Females)
which(Arbuthnot$Males < Arbuthnot$Females)
View(Arbuthnot)
Arbuthnot$Males < Arbuthnot$Females
Arbuthnot$Males > Arbuthnot$Females
precip
View(precip)
str(precip)
precip[precip > 50]
mean(precip)
mean(precip, trim = 0.25)
trimmed_mean <- mean(precip, trim = 0.25)
precip[precip > 1.5 * trimmed_mean]
1.5 * trimmed_mean
commute <- c(17, 16, 20, 24, 22, 15, 21, 15, 17, 22)
mean(commute)
max(commute)
min(commute)
commute[commute == 24]
commute == 24
commute[commute == 24] <- 18
commute
mean(commute)
max(commute)
min(commute)
commute[commute < 18] / length(commute)
length(commute[commute < 18]) / length(commute)
cd <- c(JAN=79, FEB=74, MAR=161, APR=127, MAY=133, JUN=210, JUL=99, AGO=143,
SEP=249, OUT=249, NOV=368, DEZ=302)
str(cd)
monthDays(names(cd))
monthDays("JAN")
months <- c(FEB=74,APR=127,JUN=210,SEP=249,NOV=368)
mean(month_31)
mean(months)
month_31 <- c(JAN=79, MAR=161, MAY=133, JUL=99, AGO=143, OUT=249, DEZ=302)
mean(month_31)
mean(month_31)
mean(months)
avg_salary <- c(0.57,0.89, 1.08, 1.12, 1.18 ,1.07, 1.17, 1.38, 1.44, 1.72)
diff_salary <- diff(avg_salary)
diff_salary
diff_salary / avg_salary[-10]
pct_diff <- diff_salary / avg_salary[-10]
pct_diff
# highest percentage increase
max(pct_diff)
############
library(UsingR)
avg_distance(c(1,2,3,4,5,2,3,2,7,8,5,9,8,8,7,8))
# 2.22 Write a function to compute the average distance from the mean for some data vector.
avg_distance <- function(x) {
abs(x - mean(x))
}
avg_distance(c(1,2,3,4,5,2,3,2,7,8,5,9,8,8,7,8))
f <- function(x) {
mean(x^2) - mean(x)^2
}
f(1:10)
iseven <- function(x) {
x %% 2 == 0
}
isodd <- function(x){
!iseven(x)
}
iseven(2)
iseven(3)
isodd(3)
isprime <- function(x) {
divs <- 2:(x-1)
remainders <- x %% divs
any(remainders == 0)
}
isprime(2)
isprime(3)
isprime(4)
4 %% 2:3
isprime(7)
isprime <- function(x) {
divs <- 2:x
remainders <- x %% divs
length(remainders) == 1
}
isprime(7)
isprime <- function(x) {
divs <- 2:x
remainders <- x %% divs
any(remainders == 1)
}
isprime(7)
isprime(6)
isprime <- function(x) {
divs <- 2:(x-1)
remainders <- x %% divs
all(remainders != 0)
}
isprime(7)
isprime(6)
isprime(2)
isprime(3)
isprime(4)
isprime(5)
isprime(7)
isprime(31)
isprime(27)
isprime(11)
isprime(13)
isprime(17)
isprime(166)
isprime(2)
isprime <- function(x) {
divs <- 1:(x-1)
remainders <- x %% divs
all(remainders != 0)
}
isprime(2)
isprime(3)
isprime(4)
isprime <- function(x) {
divs <- 2:(x-1)
remainders <- x %% divs
all(remainders != 0)
}
isprime(4)
isprime(5)
isprime(2)
library(UsingR)
# PROBLEMS
# 2.22 Write a function to compute the average distance from the mean for some data vector.
avg_distance <- function(x) {
abs(x - mean(x))
}
avg_distance(c(1,2,3,4,5,2,3,2,7,8,5,9,8,8,7,8))
# 2.23 Write a function f which finds the average of the x values after squaring
# and subtracts the square of the average of the numbers. Verify this output
# will always be non-negative by computing f(1:10).
f <- function(x) {
mean(x^2) - mean(x)^2
}
f(1:10)
# 2.24 An integer is even if the remainder upon dividing it by 2 is 0. This remainder
# is given by R with the syntax x %% 2. Use this to write a function
# iseven that indicates if a number is even. How would you write isodd?
iseven <- function(x) {
x %% 2 == 0
}
isodd <- function(x){
!iseven(x)
}
iseven(3)
isodd(3)
# 2.25 Write a function isprime that checks if a number x is prime by dividing
# x by all the values in 2, . . . , x 􀀀 1 then checking to see if there is a remainder
# of 0. The expression a %% b returns the remainder of a divided by b.
isprime <- function(x) {
divs <- 2:(x-1)
remainders <- x %% divs
all(remainders != 0)
}
w <- Macdonell$frequency / sum(Macdonell$frequency) # n_k / n
y <- Macdonell$height
sum(w*y)
# Measures of position
x <- 0:5
length(x)
mean(sort(x)[3:4])
median(x)
x
x[3:4]
quantile(x, 0.25)
quantile(x, seq(0, 1, by=0.2))
quantile(x)
quantile(x)
# get mode by counting most frequent
table(wts)
# get mode by counting most frequent
wts <- c(24, 27, 29, 24, 38, 40, 43, 47, 48, 59, 61)
table(wts)
# get mode by counting most frequent
wts <- c(24, 27, 29, 24, 38, 40, 43, 47, 48, 59, 61, 48)
table(wts)
wts
wts
which(table(wts) == max(table(wts)))
as.numeric(names(which(table(wts) == max(table(wts)))))
str(wts)
str(table(wts))
max(table(wts))
# Spread
range(wts)
diff(range(wts))
library(UsingR)
## Numeric Summaries
# weighted average
w <- Macdonell$frequency / sum(Macdonell$frequency) # n_k / n
y <- Macdonell$height
sum(w*y)
# Measures of position
x <- 0:5
length(x)
mean(sort(x)[3:4])
median(x)
quantile(x, 0.25)
quantile(x, seq(0, 1, by=0.2)) #quintiles
quantile(x)
# get mode by counting most frequent
wts <- c(24, 27, 29, 24, 38, 40, 43, 47, 48, 59, 61, 48)
table(wts) # value becomes a key and count becomes the values like in a dict
wts
which(table(wts) == max(table(wts)))
as.numeric(names(which(table(wts) == max(table(wts)))))
# Spread
range(wts) # min and max values
diff(range(wts))
var(wts) # sample variance
sd(wts)
# z-score
z_score <- function(x) (x - mean(x)/sd(x))
z_score(wts)
scale(wts)
scale(wts)[,1] # get the first column of the matrix
grades <- c(54, 50, 79, 79, 51,69, 55, 62, 100, 80)
z_scores <- (grades - mean(grades)) / sd(grades)
z_scores
# A
grades[z_scores >= 1/28]
# A
grades[z_scores >= 1.28]
# what proportion are more than 3 sd from the mean?
z <- (exec.pay - mean(exec.pay)) / sd(exec.pay)
out <- abs(z) > 3
sum(out) / length(z)
median(rivers)
IQR(rivers)
IQR(rivers) / sd(rivers)
# median absolute deviation
mad(rivers) / sd(rivers)
ht <- kid.weights$height
mad(ht)/sd(ht)
# sample skewness
skew <- function(x) {
n <- length(x)
z <- (x - mean(x)) / sd(x)
sum(z^3) / n
}
skew(exec.pay)
View(kid.weights)
four_year_heights <- kid.weights[kid.weights$age %in% 48:59, "height"]
skew(four_year_heights)
bumpers
# Tails
kurtosis <- function(x) {
n <- length(x)
z <- (x - mean(x) / sd(x))
sum(z^4)/n-3
}
kurtosis(galton$parent)
# Tails
kurtosis <- function(x) {
n <- length(x)
z <- (x - mean(x)) / sd(x))
sum(z^4)/n-3
}
kurtosis(galton$parent)
# Tails
kurtosis <- function(x) {
n <- length(x)
z <- (x - mean(x)) / sd(x)
sum(z^4)/n-3
}
kurtosis(galton$parent)
bumpers
# stem-and-leaf plot
stem(bumpers)
# histogram plot
hist(faithful$waiting)
bins
bins <- seq(40, 100, by=5)
bins
out <- cut(x, breaks = bins)
head(out)
x <- faithful$waiting
out <- cut(x, breaks = bins)
head(out)
# tabulate to get the counts of out
table(out)
hist(bumpers, probability = TRUE)
# density plot
(density(bumpers))
# density plot
plot(density(bumpers))
# histogram and density plot
b_hist <- hist(bumpers, plot=FALSE)
b_dens <- density(bumpers)
b_hist$density
# plotting density as a layer of b_hist
hist(bumpers, probability = TRUE,
xlim = range(c(b_hist$breaks, b_dens$x)),
ylim = range(c(b_hist$density, b_dens$y)))
lines(b_dens, lwd=2)
boxplot(bumpers, horizontal = TRUE, main="bumpers")
boxplot(kid.weights, horizontal = TRUE, main="bumpers")
boxplot(kid.weights$weight, horizontal = TRUE, main="bumpers")
boxplot(kid.weights$weight, horizontal = TRUE, main="weights")
# quantile graphs
x <- rep(Macdonell$finger, Macdonell$frequency)
qqnorm(x)
x <- jitter(HistData::Galton$child, factor=5)
qqnorm(x)
### categorical data
x <- babies$smoke
x
View(babies)
summary(babies$smoke)
str(babies$smoke)
x <- factor(x, labels = c("never", "now", "until current",
"once, quit", "unknown"))
x
head(x)
?babies
str(x)
x[x == "unknown"]
summary(x)
# tabulating factor x
table(x)
# percentage of mothers smoked in the dataset
out <- table(x)
prop <- 100 * out / sum(out)
round(prop, digits=2)
# barplot
barplot(out, horiz = TRUE, main = "Smoking Data")
# dot chart
dotchart(out)
